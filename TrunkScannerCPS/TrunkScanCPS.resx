<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="kryptonManager1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMEOAADBDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW1tZZ1tbWDwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1tbWD9bW1lkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANbW1hXW1tYEAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADW1tYE1tbWFQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1tbWKtfX
        1ygAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA19fXKNbW1ioAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        /+f///////////5//n/+f/5//8/z///Jk/8=
</value>
  </data>
</root>